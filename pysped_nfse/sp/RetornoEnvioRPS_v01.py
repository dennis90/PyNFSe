#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Dec 28 16:00:27 2012 by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class RetornoEnvioRPS(GeneratedsSuper):
    """Schema utilizado para RETORNO de Pedidos de Envio de RPS.Este Schema
    XML é utilizado pelo Web Service para informar aos prestadores
    de serviços o resultado do pedido de envio de RPS."""
    subclass = None
    superclass = None
    def __init__(self, Cabecalho=None, Alerta=None, Erro=None, ChaveNFeRPS=None):
        self.Cabecalho = Cabecalho
        if Alerta is None:
            self.Alerta = []
        else:
            self.Alerta = Alerta
        if Erro is None:
            self.Erro = []
        else:
            self.Erro = Erro
        self.ChaveNFeRPS = ChaveNFeRPS
    def factory(*args_, **kwargs_):
        if RetornoEnvioRPS.subclass:
            return RetornoEnvioRPS.subclass(*args_, **kwargs_)
        else:
            return RetornoEnvioRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cabecalho(self): return self.Cabecalho
    def set_Cabecalho(self, Cabecalho): self.Cabecalho = Cabecalho
    def get_Alerta(self): return self.Alerta
    def set_Alerta(self, Alerta): self.Alerta = Alerta
    def add_Alerta(self, value): self.Alerta.append(value)
    def insert_Alerta(self, index, value): self.Alerta[index] = value
    def get_Erro(self): return self.Erro
    def set_Erro(self, Erro): self.Erro = Erro
    def add_Erro(self, value): self.Erro.append(value)
    def insert_Erro(self, index, value): self.Erro[index] = value
    def get_ChaveNFeRPS(self): return self.ChaveNFeRPS
    def set_ChaveNFeRPS(self, ChaveNFeRPS): self.ChaveNFeRPS = ChaveNFeRPS
    def export(self, outfile, level, namespace_='', name_='RetornoEnvioRPS', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RetornoEnvioRPS')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RetornoEnvioRPS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RetornoEnvioRPS', fromsubclass_=False):
        if self.Cabecalho is not None:
            self.Cabecalho.export(outfile, level, namespace_, name_='Cabecalho', )
        for Alerta_ in self.Alerta:
            Alerta_.export(outfile, level, namespace_, name_='Alerta')
        for Erro_ in self.Erro:
            Erro_.export(outfile, level, namespace_, name_='Erro')
        if self.ChaveNFeRPS is not None:
            self.ChaveNFeRPS.export(outfile, level, namespace_, name_='ChaveNFeRPS')
    def hasContent_(self):
        if (
            self.Cabecalho is not None or
            self.Alerta or
            self.Erro or
            self.ChaveNFeRPS is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RetornoEnvioRPS'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Cabecalho is not None:
            showIndent(outfile, level)
            outfile.write('Cabecalho=model_.CabecalhoType(\n')
            self.Cabecalho.exportLiteral(outfile, level, name_='Cabecalho')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Alerta=[\n')
        level += 1
        for Alerta_ in self.Alerta:
            showIndent(outfile, level)
            outfile.write('model_.tpEvento(\n')
            Alerta_.exportLiteral(outfile, level, name_='tpEvento')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Erro=[\n')
        level += 1
        for Erro_ in self.Erro:
            showIndent(outfile, level)
            outfile.write('model_.tpEvento(\n')
            Erro_.exportLiteral(outfile, level, name_='tpEvento')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ChaveNFeRPS is not None:
            showIndent(outfile, level)
            outfile.write('ChaveNFeRPS=model_.tpChaveNFeRPS(\n')
            self.ChaveNFeRPS.exportLiteral(outfile, level, name_='ChaveNFeRPS')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cabecalho':
            obj_ = CabecalhoType.factory()
            obj_.build(child_)
            self.set_Cabecalho(obj_)
        elif nodeName_ == 'Alerta':
            obj_ = tpEvento.factory()
            obj_.build(child_)
            self.Alerta.append(obj_)
        elif nodeName_ == 'Erro':
            obj_ = tpEvento.factory()
            obj_.build(child_)
            self.Erro.append(obj_)
        elif nodeName_ == 'ChaveNFeRPS':
            obj_ = tpChaveNFeRPS.factory()
            obj_.build(child_)
            self.set_ChaveNFeRPS(obj_)
# end class RetornoEnvioRPS


class tpEvento(GeneratedsSuper):
    """Chave para identificação da origem do evento."""
    subclass = None
    superclass = None
    def __init__(self, Codigo=None, Descricao=None, ChaveRPS=None, ChaveNFe=None):
        self.Codigo = Codigo
        self.Descricao = Descricao
        self.ChaveRPS = ChaveRPS
        self.ChaveNFe = ChaveNFe
    def factory(*args_, **kwargs_):
        if tpEvento.subclass:
            return tpEvento.subclass(*args_, **kwargs_)
        else:
            return tpEvento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Codigo(self): return self.Codigo
    def set_Codigo(self, Codigo): self.Codigo = Codigo
    def validate_tpCodigoEvento(self, value):
        # Validate type tpCodigoEvento, a restriction on xs:short.
        pass
    def get_Descricao(self): return self.Descricao
    def set_Descricao(self, Descricao): self.Descricao = Descricao
    def validate_tpDescricaoEvento(self, value):
        # Validate type tpDescricaoEvento, a restriction on xs:string.
        pass
    def get_ChaveRPS(self): return self.ChaveRPS
    def set_ChaveRPS(self, ChaveRPS): self.ChaveRPS = ChaveRPS
    def get_ChaveNFe(self): return self.ChaveNFe
    def set_ChaveNFe(self, ChaveNFe): self.ChaveNFe = ChaveNFe
    def export(self, outfile, level, namespace_='', name_='tpEvento', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpEvento')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpEvento'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpEvento', fromsubclass_=False):
        if self.Codigo is not None:
            showIndent(outfile, level)
            outfile.write('<%sCodigo>%s</%sCodigo>\n' % (namespace_, self.gds_format_integer(self.Codigo, input_name='Codigo'), namespace_))
        if self.Descricao is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescricao>%s</%sDescricao>\n' % (namespace_, self.gds_format_string(quote_xml(self.Descricao).encode(ExternalEncoding), input_name='Descricao'), namespace_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespace_, name_='ChaveRPS', )
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespace_, name_='ChaveNFe', )
    def hasContent_(self):
        if (
            self.Codigo is not None or
            self.Descricao is not None or
            self.ChaveRPS is not None or
            self.ChaveNFe is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpEvento'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Codigo is not None:
            showIndent(outfile, level)
            outfile.write('Codigo=%d,\n' % self.Codigo)
        if self.Descricao is not None:
            showIndent(outfile, level)
            outfile.write('Descricao=%s,\n' % quote_python(self.Descricao).encode(ExternalEncoding))
        if self.ChaveRPS is not None:
            showIndent(outfile, level)
            outfile.write('ChaveRPS=model_.tpChaveRPS(\n')
            self.ChaveRPS.exportLiteral(outfile, level, name_='ChaveRPS')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ChaveNFe is not None:
            showIndent(outfile, level)
            outfile.write('ChaveNFe=model_.tpChaveNFe(\n')
            self.ChaveNFe.exportLiteral(outfile, level, name_='ChaveNFe')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Codigo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Codigo')
            self.Codigo = ival_
            self.validate_tpCodigoEvento(self.Codigo)    # validate type tpCodigoEvento
        elif nodeName_ == 'Descricao':
            Descricao_ = child_.text
            Descricao_ = self.gds_validate_string(Descricao_, node, 'Descricao')
            self.Descricao = Descricao_
            self.validate_tpDescricaoEvento(self.Descricao)    # validate type tpDescricaoEvento
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory()
            obj_.build(child_)
            self.set_ChaveRPS(obj_)
        elif nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory()
            obj_.build(child_)
            self.set_ChaveNFe(obj_)
# end class tpEvento


class tpCPFCNPJ(GeneratedsSuper):
    """Tipo que representa um CPF/CNPJ."""
    subclass = None
    superclass = None
    def __init__(self, CPF=None, CNPJ=None):
        self.CPF = CPF
        self.CNPJ = CNPJ
    def factory(*args_, **kwargs_):
        if tpCPFCNPJ.subclass:
            return tpCPFCNPJ.subclass(*args_, **kwargs_)
        else:
            return tpCPFCNPJ(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def validate_tpCPF(self, value):
        # Validate type tpCPF, a restriction on xs:string.
        pass
    def get_CNPJ(self): return self.CNPJ
    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ
    def validate_tpCNPJ(self, value):
        # Validate type tpCNPJ, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='tpCPFCNPJ', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpCPFCNPJ')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpCPFCNPJ'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpCPFCNPJ', fromsubclass_=False):
        if self.CPF is not None:
            showIndent(outfile, level)
            outfile.write('<%sCPF>%s</%sCPF>\n' % (namespace_, self.gds_format_string(quote_xml(self.CPF).encode(ExternalEncoding), input_name='CPF'), namespace_))
        if self.CNPJ is not None:
            showIndent(outfile, level)
            outfile.write('<%sCNPJ>%s</%sCNPJ>\n' % (namespace_, self.gds_format_string(quote_xml(self.CNPJ).encode(ExternalEncoding), input_name='CNPJ'), namespace_))
    def hasContent_(self):
        if (
            self.CPF is not None or
            self.CNPJ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpCPFCNPJ'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CPF is not None:
            showIndent(outfile, level)
            outfile.write('CPF=%s,\n' % quote_python(self.CPF).encode(ExternalEncoding))
        if self.CNPJ is not None:
            showIndent(outfile, level)
            outfile.write('CNPJ=%s,\n' % quote_python(self.CNPJ).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
            self.validate_tpCPF(self.CPF)    # validate type tpCPF
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
            self.validate_tpCNPJ(self.CNPJ)    # validate type tpCNPJ
# end class tpCPFCNPJ


class tpChaveNFeRPS(GeneratedsSuper):
    """Tipo que representa a chave de uma NF-e e a Chave do RPS que a mesma
    substitui."""
    subclass = None
    superclass = None
    def __init__(self, ChaveNFe=None, ChaveRPS=None):
        self.ChaveNFe = ChaveNFe
        self.ChaveRPS = ChaveRPS
    def factory(*args_, **kwargs_):
        if tpChaveNFeRPS.subclass:
            return tpChaveNFeRPS.subclass(*args_, **kwargs_)
        else:
            return tpChaveNFeRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChaveNFe(self): return self.ChaveNFe
    def set_ChaveNFe(self, ChaveNFe): self.ChaveNFe = ChaveNFe
    def get_ChaveRPS(self): return self.ChaveRPS
    def set_ChaveRPS(self, ChaveRPS): self.ChaveRPS = ChaveRPS
    def export(self, outfile, level, namespace_='', name_='tpChaveNFeRPS', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpChaveNFeRPS')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpChaveNFeRPS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpChaveNFeRPS', fromsubclass_=False):
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespace_, name_='ChaveNFe', )
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespace_, name_='ChaveRPS', )
    def hasContent_(self):
        if (
            self.ChaveNFe is not None or
            self.ChaveRPS is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpChaveNFeRPS'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ChaveNFe is not None:
            showIndent(outfile, level)
            outfile.write('ChaveNFe=model_.tpChaveNFe(\n')
            self.ChaveNFe.exportLiteral(outfile, level, name_='ChaveNFe')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ChaveRPS is not None:
            showIndent(outfile, level)
            outfile.write('ChaveRPS=model_.tpChaveRPS(\n')
            self.ChaveRPS.exportLiteral(outfile, level, name_='ChaveRPS')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory()
            obj_.build(child_)
            self.set_ChaveNFe(obj_)
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory()
            obj_.build(child_)
            self.set_ChaveRPS(obj_)
# end class tpChaveNFeRPS


class tpChaveNFe(GeneratedsSuper):
    """Chave de identificação da NF-e."""
    subclass = None
    superclass = None
    def __init__(self, InscricaoPrestador=None, NumeroNFe=None, CodigoVerificacao=None):
        self.InscricaoPrestador = InscricaoPrestador
        self.NumeroNFe = NumeroNFe
        self.CodigoVerificacao = CodigoVerificacao
    def factory(*args_, **kwargs_):
        if tpChaveNFe.subclass:
            return tpChaveNFe.subclass(*args_, **kwargs_)
        else:
            return tpChaveNFe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InscricaoPrestador(self): return self.InscricaoPrestador
    def set_InscricaoPrestador(self, InscricaoPrestador): self.InscricaoPrestador = InscricaoPrestador
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        pass
    def get_NumeroNFe(self): return self.NumeroNFe
    def set_NumeroNFe(self, NumeroNFe): self.NumeroNFe = NumeroNFe
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        pass
    def get_CodigoVerificacao(self): return self.CodigoVerificacao
    def set_CodigoVerificacao(self, CodigoVerificacao): self.CodigoVerificacao = CodigoVerificacao
    def validate_tpCodigoVerificacao(self, value):
        # Validate type tpCodigoVerificacao, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='tpChaveNFe', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpChaveNFe')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpChaveNFe'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpChaveNFe', fromsubclass_=False):
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>\n' % (namespace_, self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespace_))
        if self.NumeroNFe is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroNFe>%s</%sNumeroNFe>\n' % (namespace_, self.gds_format_integer(self.NumeroNFe, input_name='NumeroNFe'), namespace_))
        if self.CodigoVerificacao is not None:
            showIndent(outfile, level)
            outfile.write('<%sCodigoVerificacao>%s</%sCodigoVerificacao>\n' % (namespace_, self.gds_format_string(quote_xml(self.CodigoVerificacao).encode(ExternalEncoding), input_name='CodigoVerificacao'), namespace_))
    def hasContent_(self):
        if (
            self.InscricaoPrestador is not None or
            self.NumeroNFe is not None or
            self.CodigoVerificacao is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpChaveNFe'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoPrestador=%d,\n' % self.InscricaoPrestador)
        if self.NumeroNFe is not None:
            showIndent(outfile, level)
            outfile.write('NumeroNFe=%d,\n' % self.NumeroNFe)
        if self.CodigoVerificacao is not None:
            showIndent(outfile, level)
            outfile.write('CodigoVerificacao=%s,\n' % quote_python(self.CodigoVerificacao).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InscricaoPrestador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)    # validate type tpInscricaoMunicipal
        elif nodeName_ == 'NumeroNFe':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroNFe')
            self.NumeroNFe = ival_
            self.validate_tpNumero(self.NumeroNFe)    # validate type tpNumero
        elif nodeName_ == 'CodigoVerificacao':
            CodigoVerificacao_ = child_.text
            CodigoVerificacao_ = self.gds_validate_string(CodigoVerificacao_, node, 'CodigoVerificacao')
            self.CodigoVerificacao = CodigoVerificacao_
            self.validate_tpCodigoVerificacao(self.CodigoVerificacao)    # validate type tpCodigoVerificacao
# end class tpChaveNFe


class tpChaveRPS(GeneratedsSuper):
    """Tipo que define a chave identificadora de um RPS."""
    subclass = None
    superclass = None
    def __init__(self, InscricaoPrestador=None, SerieRPS=None, NumeroRPS=None):
        self.InscricaoPrestador = InscricaoPrestador
        self.SerieRPS = SerieRPS
        self.NumeroRPS = NumeroRPS
    def factory(*args_, **kwargs_):
        if tpChaveRPS.subclass:
            return tpChaveRPS.subclass(*args_, **kwargs_)
        else:
            return tpChaveRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InscricaoPrestador(self): return self.InscricaoPrestador
    def set_InscricaoPrestador(self, InscricaoPrestador): self.InscricaoPrestador = InscricaoPrestador
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        pass
    def get_SerieRPS(self): return self.SerieRPS
    def set_SerieRPS(self, SerieRPS): self.SerieRPS = SerieRPS
    def validate_tpSerieRPS(self, value):
        # Validate type tpSerieRPS, a restriction on xs:string.
        pass
    def get_NumeroRPS(self): return self.NumeroRPS
    def set_NumeroRPS(self, NumeroRPS): self.NumeroRPS = NumeroRPS
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        pass
    def export(self, outfile, level, namespace_='', name_='tpChaveRPS', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpChaveRPS')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpChaveRPS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpChaveRPS', fromsubclass_=False):
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>\n' % (namespace_, self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespace_))
        if self.SerieRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sSerieRPS>%s</%sSerieRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.SerieRPS).encode(ExternalEncoding), input_name='SerieRPS'), namespace_))
        if self.NumeroRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroRPS>%s</%sNumeroRPS>\n' % (namespace_, self.gds_format_integer(self.NumeroRPS, input_name='NumeroRPS'), namespace_))
    def hasContent_(self):
        if (
            self.InscricaoPrestador is not None or
            self.SerieRPS is not None or
            self.NumeroRPS is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpChaveRPS'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoPrestador=%d,\n' % self.InscricaoPrestador)
        if self.SerieRPS is not None:
            showIndent(outfile, level)
            outfile.write('SerieRPS=%s,\n' % quote_python(self.SerieRPS).encode(ExternalEncoding))
        if self.NumeroRPS is not None:
            showIndent(outfile, level)
            outfile.write('NumeroRPS=%d,\n' % self.NumeroRPS)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InscricaoPrestador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)    # validate type tpInscricaoMunicipal
        elif nodeName_ == 'SerieRPS':
            SerieRPS_ = child_.text
            SerieRPS_ = self.gds_validate_string(SerieRPS_, node, 'SerieRPS')
            self.SerieRPS = SerieRPS_
            self.validate_tpSerieRPS(self.SerieRPS)    # validate type tpSerieRPS
        elif nodeName_ == 'NumeroRPS':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroRPS')
            self.NumeroRPS = ival_
            self.validate_tpNumero(self.NumeroRPS)    # validate type tpNumero
# end class tpChaveRPS


class tpEndereco(GeneratedsSuper):
    """Tipo Endereço."""
    subclass = None
    superclass = None
    def __init__(self, TipoLogradouro=None, Logradouro=None, NumeroEndereco=None, ComplementoEndereco=None, Bairro=None, Cidade=None, UF=None, CEP=None):
        self.TipoLogradouro = TipoLogradouro
        self.Logradouro = Logradouro
        self.NumeroEndereco = NumeroEndereco
        self.ComplementoEndereco = ComplementoEndereco
        self.Bairro = Bairro
        self.Cidade = Cidade
        self.UF = UF
        self.CEP = CEP
    def factory(*args_, **kwargs_):
        if tpEndereco.subclass:
            return tpEndereco.subclass(*args_, **kwargs_)
        else:
            return tpEndereco(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TipoLogradouro(self): return self.TipoLogradouro
    def set_TipoLogradouro(self, TipoLogradouro): self.TipoLogradouro = TipoLogradouro
    def validate_tpTipoLogradouro(self, value):
        # Validate type tpTipoLogradouro, a restriction on xs:string.
        pass
    def get_Logradouro(self): return self.Logradouro
    def set_Logradouro(self, Logradouro): self.Logradouro = Logradouro
    def validate_tpLogradouro(self, value):
        # Validate type tpLogradouro, a restriction on xs:string.
        pass
    def get_NumeroEndereco(self): return self.NumeroEndereco
    def set_NumeroEndereco(self, NumeroEndereco): self.NumeroEndereco = NumeroEndereco
    def validate_tpNumeroEndereco(self, value):
        # Validate type tpNumeroEndereco, a restriction on xs:string.
        pass
    def get_ComplementoEndereco(self): return self.ComplementoEndereco
    def set_ComplementoEndereco(self, ComplementoEndereco): self.ComplementoEndereco = ComplementoEndereco
    def validate_tpComplementoEndereco(self, value):
        # Validate type tpComplementoEndereco, a restriction on xs:string.
        pass
    def get_Bairro(self): return self.Bairro
    def set_Bairro(self, Bairro): self.Bairro = Bairro
    def validate_tpBairro(self, value):
        # Validate type tpBairro, a restriction on xs:string.
        pass
    def get_Cidade(self): return self.Cidade
    def set_Cidade(self, Cidade): self.Cidade = Cidade
    def validate_tpCidade(self, value):
        # Validate type tpCidade, a restriction on xs:int.
        pass
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def validate_tpUF(self, value):
        # Validate type tpUF, a restriction on xs:string.
        pass
    def get_CEP(self): return self.CEP
    def set_CEP(self, CEP): self.CEP = CEP
    def validate_tpCEP(self, value):
        # Validate type tpCEP, a restriction on xs:int.
        pass
    def export(self, outfile, level, namespace_='', name_='tpEndereco', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpEndereco')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpEndereco'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpEndereco', fromsubclass_=False):
        if self.TipoLogradouro is not None:
            showIndent(outfile, level)
            outfile.write('<%sTipoLogradouro>%s</%sTipoLogradouro>\n' % (namespace_, self.gds_format_string(quote_xml(self.TipoLogradouro).encode(ExternalEncoding), input_name='TipoLogradouro'), namespace_))
        if self.Logradouro is not None:
            showIndent(outfile, level)
            outfile.write('<%sLogradouro>%s</%sLogradouro>\n' % (namespace_, self.gds_format_string(quote_xml(self.Logradouro).encode(ExternalEncoding), input_name='Logradouro'), namespace_))
        if self.NumeroEndereco is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroEndereco>%s</%sNumeroEndereco>\n' % (namespace_, self.gds_format_string(quote_xml(self.NumeroEndereco).encode(ExternalEncoding), input_name='NumeroEndereco'), namespace_))
        if self.ComplementoEndereco is not None:
            showIndent(outfile, level)
            outfile.write('<%sComplementoEndereco>%s</%sComplementoEndereco>\n' % (namespace_, self.gds_format_string(quote_xml(self.ComplementoEndereco).encode(ExternalEncoding), input_name='ComplementoEndereco'), namespace_))
        if self.Bairro is not None:
            showIndent(outfile, level)
            outfile.write('<%sBairro>%s</%sBairro>\n' % (namespace_, self.gds_format_string(quote_xml(self.Bairro).encode(ExternalEncoding), input_name='Bairro'), namespace_))
        if self.Cidade is not None:
            showIndent(outfile, level)
            outfile.write('<%sCidade>%s</%sCidade>\n' % (namespace_, self.gds_format_integer(self.Cidade, input_name='Cidade'), namespace_))
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('<%sUF>%s</%sUF>\n' % (namespace_, self.gds_format_string(quote_xml(self.UF).encode(ExternalEncoding), input_name='UF'), namespace_))
        if self.CEP is not None:
            showIndent(outfile, level)
            outfile.write('<%sCEP>%s</%sCEP>\n' % (namespace_, self.gds_format_integer(self.CEP, input_name='CEP'), namespace_))
    def hasContent_(self):
        if (
            self.TipoLogradouro is not None or
            self.Logradouro is not None or
            self.NumeroEndereco is not None or
            self.ComplementoEndereco is not None or
            self.Bairro is not None or
            self.Cidade is not None or
            self.UF is not None or
            self.CEP is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpEndereco'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TipoLogradouro is not None:
            showIndent(outfile, level)
            outfile.write('TipoLogradouro=%s,\n' % quote_python(self.TipoLogradouro).encode(ExternalEncoding))
        if self.Logradouro is not None:
            showIndent(outfile, level)
            outfile.write('Logradouro=%s,\n' % quote_python(self.Logradouro).encode(ExternalEncoding))
        if self.NumeroEndereco is not None:
            showIndent(outfile, level)
            outfile.write('NumeroEndereco=%s,\n' % quote_python(self.NumeroEndereco).encode(ExternalEncoding))
        if self.ComplementoEndereco is not None:
            showIndent(outfile, level)
            outfile.write('ComplementoEndereco=%s,\n' % quote_python(self.ComplementoEndereco).encode(ExternalEncoding))
        if self.Bairro is not None:
            showIndent(outfile, level)
            outfile.write('Bairro=%s,\n' % quote_python(self.Bairro).encode(ExternalEncoding))
        if self.Cidade is not None:
            showIndent(outfile, level)
            outfile.write('Cidade=%d,\n' % self.Cidade)
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('UF=%s,\n' % quote_python(self.UF).encode(ExternalEncoding))
        if self.CEP is not None:
            showIndent(outfile, level)
            outfile.write('CEP=%d,\n' % self.CEP)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TipoLogradouro':
            TipoLogradouro_ = child_.text
            TipoLogradouro_ = self.gds_validate_string(TipoLogradouro_, node, 'TipoLogradouro')
            self.TipoLogradouro = TipoLogradouro_
            self.validate_tpTipoLogradouro(self.TipoLogradouro)    # validate type tpTipoLogradouro
        elif nodeName_ == 'Logradouro':
            Logradouro_ = child_.text
            Logradouro_ = self.gds_validate_string(Logradouro_, node, 'Logradouro')
            self.Logradouro = Logradouro_
            self.validate_tpLogradouro(self.Logradouro)    # validate type tpLogradouro
        elif nodeName_ == 'NumeroEndereco':
            NumeroEndereco_ = child_.text
            NumeroEndereco_ = self.gds_validate_string(NumeroEndereco_, node, 'NumeroEndereco')
            self.NumeroEndereco = NumeroEndereco_
            self.validate_tpNumeroEndereco(self.NumeroEndereco)    # validate type tpNumeroEndereco
        elif nodeName_ == 'ComplementoEndereco':
            ComplementoEndereco_ = child_.text
            ComplementoEndereco_ = self.gds_validate_string(ComplementoEndereco_, node, 'ComplementoEndereco')
            self.ComplementoEndereco = ComplementoEndereco_
            self.validate_tpComplementoEndereco(self.ComplementoEndereco)    # validate type tpComplementoEndereco
        elif nodeName_ == 'Bairro':
            Bairro_ = child_.text
            Bairro_ = self.gds_validate_string(Bairro_, node, 'Bairro')
            self.Bairro = Bairro_
            self.validate_tpBairro(self.Bairro)    # validate type tpBairro
        elif nodeName_ == 'Cidade':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Cidade')
            self.Cidade = ival_
            self.validate_tpCidade(self.Cidade)    # validate type tpCidade
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            self.validate_tpUF(self.UF)    # validate type tpUF
        elif nodeName_ == 'CEP':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CEP')
            self.CEP = ival_
            self.validate_tpCEP(self.CEP)    # validate type tpCEP
# end class tpEndereco


class tpInformacoesLote(GeneratedsSuper):
    """Informações do lote processado."""
    subclass = None
    superclass = None
    def __init__(self, NumeroLote=None, InscricaoPrestador=None, CPFCNPJRemetente=None, DataEnvioLote=None, QtdNotasProcessadas=None, TempoProcessamento=None, ValorTotalServicos=None, ValorTotalDeducoes=None):
        self.NumeroLote = NumeroLote
        self.InscricaoPrestador = InscricaoPrestador
        self.CPFCNPJRemetente = CPFCNPJRemetente
        self.DataEnvioLote = DataEnvioLote
        self.QtdNotasProcessadas = QtdNotasProcessadas
        self.TempoProcessamento = TempoProcessamento
        self.ValorTotalServicos = ValorTotalServicos
        self.ValorTotalDeducoes = ValorTotalDeducoes
    def factory(*args_, **kwargs_):
        if tpInformacoesLote.subclass:
            return tpInformacoesLote.subclass(*args_, **kwargs_)
        else:
            return tpInformacoesLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumeroLote(self): return self.NumeroLote
    def set_NumeroLote(self, NumeroLote): self.NumeroLote = NumeroLote
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        pass
    def get_InscricaoPrestador(self): return self.InscricaoPrestador
    def set_InscricaoPrestador(self, InscricaoPrestador): self.InscricaoPrestador = InscricaoPrestador
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        pass
    def get_CPFCNPJRemetente(self): return self.CPFCNPJRemetente
    def set_CPFCNPJRemetente(self, CPFCNPJRemetente): self.CPFCNPJRemetente = CPFCNPJRemetente
    def get_DataEnvioLote(self): return self.DataEnvioLote
    def set_DataEnvioLote(self, DataEnvioLote): self.DataEnvioLote = DataEnvioLote
    def get_QtdNotasProcessadas(self): return self.QtdNotasProcessadas
    def set_QtdNotasProcessadas(self, QtdNotasProcessadas): self.QtdNotasProcessadas = QtdNotasProcessadas
    def validate_tpQuantidade(self, value):
        # Validate type tpQuantidade, a restriction on xs:long.
        pass
    def get_TempoProcessamento(self): return self.TempoProcessamento
    def set_TempoProcessamento(self, TempoProcessamento): self.TempoProcessamento = TempoProcessamento
    def validate_tpTempoProcessamento(self, value):
        # Validate type tpTempoProcessamento, a restriction on xs:long.
        pass
    def get_ValorTotalServicos(self): return self.ValorTotalServicos
    def set_ValorTotalServicos(self, ValorTotalServicos): self.ValorTotalServicos = ValorTotalServicos
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        pass
    def get_ValorTotalDeducoes(self): return self.ValorTotalDeducoes
    def set_ValorTotalDeducoes(self, ValorTotalDeducoes): self.ValorTotalDeducoes = ValorTotalDeducoes
    def export(self, outfile, level, namespace_='', name_='tpInformacoesLote', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpInformacoesLote')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpInformacoesLote'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpInformacoesLote', fromsubclass_=False):
        if self.NumeroLote is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>\n' % (namespace_, self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespace_))
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoPrestador>%s</%sInscricaoPrestador>\n' % (namespace_, self.gds_format_integer(self.InscricaoPrestador, input_name='InscricaoPrestador'), namespace_))
        if self.CPFCNPJRemetente is not None:
            self.CPFCNPJRemetente.export(outfile, level, namespace_, name_='CPFCNPJRemetente', )
        if self.DataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataEnvioLote>%s</%sDataEnvioLote>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataEnvioLote).encode(ExternalEncoding), input_name='DataEnvioLote'), namespace_))
        if self.QtdNotasProcessadas is not None:
            showIndent(outfile, level)
            outfile.write('<%sQtdNotasProcessadas>%s</%sQtdNotasProcessadas>\n' % (namespace_, self.gds_format_integer(self.QtdNotasProcessadas, input_name='QtdNotasProcessadas'), namespace_))
        if self.TempoProcessamento is not None:
            showIndent(outfile, level)
            outfile.write('<%sTempoProcessamento>%s</%sTempoProcessamento>\n' % (namespace_, self.gds_format_integer(self.TempoProcessamento, input_name='TempoProcessamento'), namespace_))
        if self.ValorTotalServicos is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorTotalServicos>%s</%sValorTotalServicos>\n' % (namespace_, self.gds_format_float(self.ValorTotalServicos, input_name='ValorTotalServicos'), namespace_))
        if self.ValorTotalDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorTotalDeducoes>%s</%sValorTotalDeducoes>\n' % (namespace_, self.gds_format_float(self.ValorTotalDeducoes, input_name='ValorTotalDeducoes'), namespace_))
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.InscricaoPrestador is not None or
            self.CPFCNPJRemetente is not None or
            self.DataEnvioLote is not None or
            self.QtdNotasProcessadas is not None or
            self.TempoProcessamento is not None or
            self.ValorTotalServicos is not None or
            self.ValorTotalDeducoes is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpInformacoesLote'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NumeroLote is not None:
            showIndent(outfile, level)
            outfile.write('NumeroLote=%d,\n' % self.NumeroLote)
        if self.InscricaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoPrestador=%d,\n' % self.InscricaoPrestador)
        if self.CPFCNPJRemetente is not None:
            showIndent(outfile, level)
            outfile.write('CPFCNPJRemetente=model_.tpCPFCNPJ(\n')
            self.CPFCNPJRemetente.exportLiteral(outfile, level, name_='CPFCNPJRemetente')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('DataEnvioLote=%s,\n' % quote_python(self.DataEnvioLote).encode(ExternalEncoding))
        if self.QtdNotasProcessadas is not None:
            showIndent(outfile, level)
            outfile.write('QtdNotasProcessadas=%d,\n' % self.QtdNotasProcessadas)
        if self.TempoProcessamento is not None:
            showIndent(outfile, level)
            outfile.write('TempoProcessamento=%d,\n' % self.TempoProcessamento)
        if self.ValorTotalServicos is not None:
            showIndent(outfile, level)
            outfile.write('ValorTotalServicos=%f,\n' % self.ValorTotalServicos)
        if self.ValorTotalDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('ValorTotalDeducoes=%f,\n' % self.ValorTotalDeducoes)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            self.validate_tpNumero(self.NumeroLote)    # validate type tpNumero
        elif nodeName_ == 'InscricaoPrestador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoPrestador')
            self.InscricaoPrestador = ival_
            self.validate_tpInscricaoMunicipal(self.InscricaoPrestador)    # validate type tpInscricaoMunicipal
        elif nodeName_ == 'CPFCNPJRemetente':
            obj_ = tpCPFCNPJ.factory()
            obj_.build(child_)
            self.set_CPFCNPJRemetente(obj_)
        elif nodeName_ == 'DataEnvioLote':
            DataEnvioLote_ = child_.text
            DataEnvioLote_ = self.gds_validate_string(DataEnvioLote_, node, 'DataEnvioLote')
            self.DataEnvioLote = DataEnvioLote_
        elif nodeName_ == 'QtdNotasProcessadas':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'QtdNotasProcessadas')
            self.QtdNotasProcessadas = ival_
            self.validate_tpQuantidade(self.QtdNotasProcessadas)    # validate type tpQuantidade
        elif nodeName_ == 'TempoProcessamento':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TempoProcessamento')
            self.TempoProcessamento = ival_
            self.validate_tpTempoProcessamento(self.TempoProcessamento)    # validate type tpTempoProcessamento
        elif nodeName_ == 'ValorTotalServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalServicos')
            self.ValorTotalServicos = fval_
            self.validate_tpValor(self.ValorTotalServicos)    # validate type tpValor
        elif nodeName_ == 'ValorTotalDeducoes':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorTotalDeducoes')
            self.ValorTotalDeducoes = fval_
            self.validate_tpValor(self.ValorTotalDeducoes)    # validate type tpValor
# end class tpInformacoesLote


class tpNFe(GeneratedsSuper):
    """Tipo que representa uma NF-e"""
    subclass = None
    superclass = None
    def __init__(self, Assinatura=None, ChaveNFe=None, DataEmissaoNFe=None, NumeroLote=None, ChaveRPS=None, TipoRPS=None, DataEmissaoRPS=None, CPFCNPJPrestador=None, RazaoSocialPrestador=None, EnderecoPrestador=None, EmailPrestador=None, StatusNFe=None, DataCancelamento=None, TributacaoNFe=None, OpcaoSimples=None, NumeroGuia=None, DataQuitacaoGuia=None, ValorServicos=None, ValorDeducoes=None, ValorPIS=None, ValorCOFINS=None, ValorINSS=None, ValorIR=None, ValorCSLL=None, CodigoServico=None, AliquotaServicos=None, ValorISS=None, ValorCredito=None, ISSRetido=None, CPFCNPJTomador=None, InscricaoMunicipalTomador=None, InscricaoEstadualTomador=None, RazaoSocialTomador=None, EnderecoTomador=None, EmailTomador=None, Discriminacao=None):
        self.Assinatura = Assinatura
        self.ChaveNFe = ChaveNFe
        self.DataEmissaoNFe = DataEmissaoNFe
        self.NumeroLote = NumeroLote
        self.ChaveRPS = ChaveRPS
        self.TipoRPS = TipoRPS
        self.DataEmissaoRPS = DataEmissaoRPS
        self.CPFCNPJPrestador = CPFCNPJPrestador
        self.RazaoSocialPrestador = RazaoSocialPrestador
        self.EnderecoPrestador = EnderecoPrestador
        self.EmailPrestador = EmailPrestador
        self.StatusNFe = StatusNFe
        self.DataCancelamento = DataCancelamento
        self.TributacaoNFe = TributacaoNFe
        self.OpcaoSimples = OpcaoSimples
        self.NumeroGuia = NumeroGuia
        self.DataQuitacaoGuia = DataQuitacaoGuia
        self.ValorServicos = ValorServicos
        self.ValorDeducoes = ValorDeducoes
        self.ValorPIS = ValorPIS
        self.ValorCOFINS = ValorCOFINS
        self.ValorINSS = ValorINSS
        self.ValorIR = ValorIR
        self.ValorCSLL = ValorCSLL
        self.CodigoServico = CodigoServico
        self.AliquotaServicos = AliquotaServicos
        self.ValorISS = ValorISS
        self.ValorCredito = ValorCredito
        self.ISSRetido = ISSRetido
        self.CPFCNPJTomador = CPFCNPJTomador
        self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
        self.InscricaoEstadualTomador = InscricaoEstadualTomador
        self.RazaoSocialTomador = RazaoSocialTomador
        self.EnderecoTomador = EnderecoTomador
        self.EmailTomador = EmailTomador
        self.Discriminacao = Discriminacao
    def factory(*args_, **kwargs_):
        if tpNFe.subclass:
            return tpNFe.subclass(*args_, **kwargs_)
        else:
            return tpNFe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Assinatura(self): return self.Assinatura
    def set_Assinatura(self, Assinatura): self.Assinatura = Assinatura
    def validate_tpAssinatura(self, value):
        # Validate type tpAssinatura, a restriction on xs:base64Binary.
        pass
    def get_ChaveNFe(self): return self.ChaveNFe
    def set_ChaveNFe(self, ChaveNFe): self.ChaveNFe = ChaveNFe
    def get_DataEmissaoNFe(self): return self.DataEmissaoNFe
    def set_DataEmissaoNFe(self, DataEmissaoNFe): self.DataEmissaoNFe = DataEmissaoNFe
    def get_NumeroLote(self): return self.NumeroLote
    def set_NumeroLote(self, NumeroLote): self.NumeroLote = NumeroLote
    def validate_tpNumero(self, value):
        # Validate type tpNumero, a restriction on xs:long.
        pass
    def get_ChaveRPS(self): return self.ChaveRPS
    def set_ChaveRPS(self, ChaveRPS): self.ChaveRPS = ChaveRPS
    def get_TipoRPS(self): return self.TipoRPS
    def set_TipoRPS(self, TipoRPS): self.TipoRPS = TipoRPS
    def validate_tpTipoRPS(self, value):
        # Validate type tpTipoRPS, a restriction on xs:string.
        pass
    def get_DataEmissaoRPS(self): return self.DataEmissaoRPS
    def set_DataEmissaoRPS(self, DataEmissaoRPS): self.DataEmissaoRPS = DataEmissaoRPS
    def get_CPFCNPJPrestador(self): return self.CPFCNPJPrestador
    def set_CPFCNPJPrestador(self, CPFCNPJPrestador): self.CPFCNPJPrestador = CPFCNPJPrestador
    def get_RazaoSocialPrestador(self): return self.RazaoSocialPrestador
    def set_RazaoSocialPrestador(self, RazaoSocialPrestador): self.RazaoSocialPrestador = RazaoSocialPrestador
    def validate_tpRazaoSocial(self, value):
        # Validate type tpRazaoSocial, a restriction on xs:string.
        pass
    def get_EnderecoPrestador(self): return self.EnderecoPrestador
    def set_EnderecoPrestador(self, EnderecoPrestador): self.EnderecoPrestador = EnderecoPrestador
    def get_EmailPrestador(self): return self.EmailPrestador
    def set_EmailPrestador(self, EmailPrestador): self.EmailPrestador = EmailPrestador
    def validate_tpEmail(self, value):
        # Validate type tpEmail, a restriction on xs:string.
        pass
    def get_StatusNFe(self): return self.StatusNFe
    def set_StatusNFe(self, StatusNFe): self.StatusNFe = StatusNFe
    def validate_tpStatusNFe(self, value):
        # Validate type tpStatusNFe, a restriction on xs:string.
        pass
    def get_DataCancelamento(self): return self.DataCancelamento
    def set_DataCancelamento(self, DataCancelamento): self.DataCancelamento = DataCancelamento
    def get_TributacaoNFe(self): return self.TributacaoNFe
    def set_TributacaoNFe(self, TributacaoNFe): self.TributacaoNFe = TributacaoNFe
    def validate_tpTributacaoNFe(self, value):
        # Validate type tpTributacaoNFe, a restriction on xs:string.
        pass
    def get_OpcaoSimples(self): return self.OpcaoSimples
    def set_OpcaoSimples(self, OpcaoSimples): self.OpcaoSimples = OpcaoSimples
    def validate_tpOpcaoSimples(self, value):
        # Validate type tpOpcaoSimples, a restriction on xs:string.
        pass
    def get_NumeroGuia(self): return self.NumeroGuia
    def set_NumeroGuia(self, NumeroGuia): self.NumeroGuia = NumeroGuia
    def get_DataQuitacaoGuia(self): return self.DataQuitacaoGuia
    def set_DataQuitacaoGuia(self, DataQuitacaoGuia): self.DataQuitacaoGuia = DataQuitacaoGuia
    def get_ValorServicos(self): return self.ValorServicos
    def set_ValorServicos(self, ValorServicos): self.ValorServicos = ValorServicos
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        pass
    def get_ValorDeducoes(self): return self.ValorDeducoes
    def set_ValorDeducoes(self, ValorDeducoes): self.ValorDeducoes = ValorDeducoes
    def get_ValorPIS(self): return self.ValorPIS
    def set_ValorPIS(self, ValorPIS): self.ValorPIS = ValorPIS
    def get_ValorCOFINS(self): return self.ValorCOFINS
    def set_ValorCOFINS(self, ValorCOFINS): self.ValorCOFINS = ValorCOFINS
    def get_ValorINSS(self): return self.ValorINSS
    def set_ValorINSS(self, ValorINSS): self.ValorINSS = ValorINSS
    def get_ValorIR(self): return self.ValorIR
    def set_ValorIR(self, ValorIR): self.ValorIR = ValorIR
    def get_ValorCSLL(self): return self.ValorCSLL
    def set_ValorCSLL(self, ValorCSLL): self.ValorCSLL = ValorCSLL
    def get_CodigoServico(self): return self.CodigoServico
    def set_CodigoServico(self, CodigoServico): self.CodigoServico = CodigoServico
    def validate_tpCodigoServico(self, value):
        # Validate type tpCodigoServico, a restriction on xs:int.
        pass
    def get_AliquotaServicos(self): return self.AliquotaServicos
    def set_AliquotaServicos(self, AliquotaServicos): self.AliquotaServicos = AliquotaServicos
    def validate_tpAliquota(self, value):
        # Validate type tpAliquota, a restriction on xs:decimal.
        pass
    def get_ValorISS(self): return self.ValorISS
    def set_ValorISS(self, ValorISS): self.ValorISS = ValorISS
    def get_ValorCredito(self): return self.ValorCredito
    def set_ValorCredito(self, ValorCredito): self.ValorCredito = ValorCredito
    def get_ISSRetido(self): return self.ISSRetido
    def set_ISSRetido(self, ISSRetido): self.ISSRetido = ISSRetido
    def get_CPFCNPJTomador(self): return self.CPFCNPJTomador
    def set_CPFCNPJTomador(self, CPFCNPJTomador): self.CPFCNPJTomador = CPFCNPJTomador
    def get_InscricaoMunicipalTomador(self): return self.InscricaoMunicipalTomador
    def set_InscricaoMunicipalTomador(self, InscricaoMunicipalTomador): self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        pass
    def get_InscricaoEstadualTomador(self): return self.InscricaoEstadualTomador
    def set_InscricaoEstadualTomador(self, InscricaoEstadualTomador): self.InscricaoEstadualTomador = InscricaoEstadualTomador
    def validate_tpInscricaoEstadual(self, value):
        # Validate type tpInscricaoEstadual, a restriction on xs:long.
        pass
    def get_RazaoSocialTomador(self): return self.RazaoSocialTomador
    def set_RazaoSocialTomador(self, RazaoSocialTomador): self.RazaoSocialTomador = RazaoSocialTomador
    def get_EnderecoTomador(self): return self.EnderecoTomador
    def set_EnderecoTomador(self, EnderecoTomador): self.EnderecoTomador = EnderecoTomador
    def get_EmailTomador(self): return self.EmailTomador
    def set_EmailTomador(self, EmailTomador): self.EmailTomador = EmailTomador
    def get_Discriminacao(self): return self.Discriminacao
    def set_Discriminacao(self, Discriminacao): self.Discriminacao = Discriminacao
    def validate_tpDiscriminacao(self, value):
        # Validate type tpDiscriminacao, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='tpNFe', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpNFe')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpNFe'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpNFe', fromsubclass_=False):
        if self.Assinatura is not None:
            showIndent(outfile, level)
            outfile.write('<%sAssinatura>%s</%sAssinatura>\n' % (namespace_, self.gds_format_string(quote_xml(self.Assinatura).encode(ExternalEncoding), input_name='Assinatura'), namespace_))
        if self.ChaveNFe is not None:
            self.ChaveNFe.export(outfile, level, namespace_, name_='ChaveNFe', )
        if self.DataEmissaoNFe is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataEmissaoNFe>%s</%sDataEmissaoNFe>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataEmissaoNFe).encode(ExternalEncoding), input_name='DataEmissaoNFe'), namespace_))
        if self.NumeroLote is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>\n' % (namespace_, self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespace_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespace_, name_='ChaveRPS')
        if self.TipoRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sTipoRPS>%s</%sTipoRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.TipoRPS).encode(ExternalEncoding), input_name='TipoRPS'), namespace_))
        if self.DataEmissaoRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataEmissaoRPS>%s</%sDataEmissaoRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataEmissaoRPS).encode(ExternalEncoding), input_name='DataEmissaoRPS'), namespace_))
        if self.CPFCNPJPrestador is not None:
            self.CPFCNPJPrestador.export(outfile, level, namespace_, name_='CPFCNPJPrestador', )
        if self.RazaoSocialPrestador is not None:
            showIndent(outfile, level)
            outfile.write('<%sRazaoSocialPrestador>%s</%sRazaoSocialPrestador>\n' % (namespace_, self.gds_format_string(quote_xml(self.RazaoSocialPrestador).encode(ExternalEncoding), input_name='RazaoSocialPrestador'), namespace_))
        if self.EnderecoPrestador is not None:
            self.EnderecoPrestador.export(outfile, level, namespace_, name_='EnderecoPrestador', )
        if self.EmailPrestador is not None:
            showIndent(outfile, level)
            outfile.write('<%sEmailPrestador>%s</%sEmailPrestador>\n' % (namespace_, self.gds_format_string(quote_xml(self.EmailPrestador).encode(ExternalEncoding), input_name='EmailPrestador'), namespace_))
        if self.StatusNFe is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusNFe>%s</%sStatusNFe>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusNFe).encode(ExternalEncoding), input_name='StatusNFe'), namespace_))
        if self.DataCancelamento is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataCancelamento>%s</%sDataCancelamento>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataCancelamento).encode(ExternalEncoding), input_name='DataCancelamento'), namespace_))
        if self.TributacaoNFe is not None:
            showIndent(outfile, level)
            outfile.write('<%sTributacaoNFe>%s</%sTributacaoNFe>\n' % (namespace_, self.gds_format_string(quote_xml(self.TributacaoNFe).encode(ExternalEncoding), input_name='TributacaoNFe'), namespace_))
        if self.OpcaoSimples is not None:
            showIndent(outfile, level)
            outfile.write('<%sOpcaoSimples>%s</%sOpcaoSimples>\n' % (namespace_, self.gds_format_string(quote_xml(self.OpcaoSimples).encode(ExternalEncoding), input_name='OpcaoSimples'), namespace_))
        if self.NumeroGuia is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumeroGuia>%s</%sNumeroGuia>\n' % (namespace_, self.gds_format_integer(self.NumeroGuia, input_name='NumeroGuia'), namespace_))
        if self.DataQuitacaoGuia is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataQuitacaoGuia>%s</%sDataQuitacaoGuia>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataQuitacaoGuia).encode(ExternalEncoding), input_name='DataQuitacaoGuia'), namespace_))
        if self.ValorServicos is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorServicos>%s</%sValorServicos>\n' % (namespace_, self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespace_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>\n' % (namespace_, self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespace_))
        if self.ValorPIS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorPIS>%s</%sValorPIS>\n' % (namespace_, self.gds_format_float(self.ValorPIS, input_name='ValorPIS'), namespace_))
        if self.ValorCOFINS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorCOFINS>%s</%sValorCOFINS>\n' % (namespace_, self.gds_format_float(self.ValorCOFINS, input_name='ValorCOFINS'), namespace_))
        if self.ValorINSS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorINSS>%s</%sValorINSS>\n' % (namespace_, self.gds_format_float(self.ValorINSS, input_name='ValorINSS'), namespace_))
        if self.ValorIR is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorIR>%s</%sValorIR>\n' % (namespace_, self.gds_format_float(self.ValorIR, input_name='ValorIR'), namespace_))
        if self.ValorCSLL is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorCSLL>%s</%sValorCSLL>\n' % (namespace_, self.gds_format_float(self.ValorCSLL, input_name='ValorCSLL'), namespace_))
        if self.CodigoServico is not None:
            showIndent(outfile, level)
            outfile.write('<%sCodigoServico>%s</%sCodigoServico>\n' % (namespace_, self.gds_format_integer(self.CodigoServico, input_name='CodigoServico'), namespace_))
        if self.AliquotaServicos is not None:
            showIndent(outfile, level)
            outfile.write('<%sAliquotaServicos>%s</%sAliquotaServicos>\n' % (namespace_, self.gds_format_float(self.AliquotaServicos, input_name='AliquotaServicos'), namespace_))
        if self.ValorISS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorISS>%s</%sValorISS>\n' % (namespace_, self.gds_format_float(self.ValorISS, input_name='ValorISS'), namespace_))
        if self.ValorCredito is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorCredito>%s</%sValorCredito>\n' % (namespace_, self.gds_format_float(self.ValorCredito, input_name='ValorCredito'), namespace_))
        if self.ISSRetido is not None:
            showIndent(outfile, level)
            outfile.write('<%sISSRetido>%s</%sISSRetido>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ISSRetido)), input_name='ISSRetido'), namespace_))
        if self.CPFCNPJTomador is not None:
            self.CPFCNPJTomador.export(outfile, level, namespace_, name_='CPFCNPJTomador')
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoMunicipalTomador>%s</%sInscricaoMunicipalTomador>\n' % (namespace_, self.gds_format_integer(self.InscricaoMunicipalTomador, input_name='InscricaoMunicipalTomador'), namespace_))
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoEstadualTomador>%s</%sInscricaoEstadualTomador>\n' % (namespace_, self.gds_format_integer(self.InscricaoEstadualTomador, input_name='InscricaoEstadualTomador'), namespace_))
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sRazaoSocialTomador>%s</%sRazaoSocialTomador>\n' % (namespace_, self.gds_format_string(quote_xml(self.RazaoSocialTomador).encode(ExternalEncoding), input_name='RazaoSocialTomador'), namespace_))
        if self.EnderecoTomador is not None:
            self.EnderecoTomador.export(outfile, level, namespace_, name_='EnderecoTomador')
        if self.EmailTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sEmailTomador>%s</%sEmailTomador>\n' % (namespace_, self.gds_format_string(quote_xml(self.EmailTomador).encode(ExternalEncoding), input_name='EmailTomador'), namespace_))
        if self.Discriminacao is not None:
            showIndent(outfile, level)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>\n' % (namespace_, self.gds_format_string(quote_xml(self.Discriminacao).encode(ExternalEncoding), input_name='Discriminacao'), namespace_))
    def hasContent_(self):
        if (
            self.Assinatura is not None or
            self.ChaveNFe is not None or
            self.DataEmissaoNFe is not None or
            self.NumeroLote is not None or
            self.ChaveRPS is not None or
            self.TipoRPS is not None or
            self.DataEmissaoRPS is not None or
            self.CPFCNPJPrestador is not None or
            self.RazaoSocialPrestador is not None or
            self.EnderecoPrestador is not None or
            self.EmailPrestador is not None or
            self.StatusNFe is not None or
            self.DataCancelamento is not None or
            self.TributacaoNFe is not None or
            self.OpcaoSimples is not None or
            self.NumeroGuia is not None or
            self.DataQuitacaoGuia is not None or
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPIS is not None or
            self.ValorCOFINS is not None or
            self.ValorINSS is not None or
            self.ValorIR is not None or
            self.ValorCSLL is not None or
            self.CodigoServico is not None or
            self.AliquotaServicos is not None or
            self.ValorISS is not None or
            self.ValorCredito is not None or
            self.ISSRetido is not None or
            self.CPFCNPJTomador is not None or
            self.InscricaoMunicipalTomador is not None or
            self.InscricaoEstadualTomador is not None or
            self.RazaoSocialTomador is not None or
            self.EnderecoTomador is not None or
            self.EmailTomador is not None or
            self.Discriminacao is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpNFe'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Assinatura is not None:
            showIndent(outfile, level)
            outfile.write('Assinatura=%s,\n' % quote_python(self.Assinatura).encode(ExternalEncoding))
        if self.ChaveNFe is not None:
            showIndent(outfile, level)
            outfile.write('ChaveNFe=model_.tpChaveNFe(\n')
            self.ChaveNFe.exportLiteral(outfile, level, name_='ChaveNFe')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DataEmissaoNFe is not None:
            showIndent(outfile, level)
            outfile.write('DataEmissaoNFe=%s,\n' % quote_python(self.DataEmissaoNFe).encode(ExternalEncoding))
        if self.NumeroLote is not None:
            showIndent(outfile, level)
            outfile.write('NumeroLote=%d,\n' % self.NumeroLote)
        if self.ChaveRPS is not None:
            showIndent(outfile, level)
            outfile.write('ChaveRPS=model_.tpChaveRPS(\n')
            self.ChaveRPS.exportLiteral(outfile, level, name_='ChaveRPS')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TipoRPS is not None:
            showIndent(outfile, level)
            outfile.write('TipoRPS=%s,\n' % quote_python(self.TipoRPS).encode(ExternalEncoding))
        if self.DataEmissaoRPS is not None:
            showIndent(outfile, level)
            outfile.write('DataEmissaoRPS=%s,\n' % quote_python(self.DataEmissaoRPS).encode(ExternalEncoding))
        if self.CPFCNPJPrestador is not None:
            showIndent(outfile, level)
            outfile.write('CPFCNPJPrestador=model_.tpCPFCNPJ(\n')
            self.CPFCNPJPrestador.exportLiteral(outfile, level, name_='CPFCNPJPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RazaoSocialPrestador is not None:
            showIndent(outfile, level)
            outfile.write('RazaoSocialPrestador=%s,\n' % quote_python(self.RazaoSocialPrestador).encode(ExternalEncoding))
        if self.EnderecoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('EnderecoPrestador=model_.tpEndereco(\n')
            self.EnderecoPrestador.exportLiteral(outfile, level, name_='EnderecoPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EmailPrestador is not None:
            showIndent(outfile, level)
            outfile.write('EmailPrestador=%s,\n' % quote_python(self.EmailPrestador).encode(ExternalEncoding))
        if self.StatusNFe is not None:
            showIndent(outfile, level)
            outfile.write('StatusNFe=%s,\n' % quote_python(self.StatusNFe).encode(ExternalEncoding))
        if self.DataCancelamento is not None:
            showIndent(outfile, level)
            outfile.write('DataCancelamento=%s,\n' % quote_python(self.DataCancelamento).encode(ExternalEncoding))
        if self.TributacaoNFe is not None:
            showIndent(outfile, level)
            outfile.write('TributacaoNFe=%s,\n' % quote_python(self.TributacaoNFe).encode(ExternalEncoding))
        if self.OpcaoSimples is not None:
            showIndent(outfile, level)
            outfile.write('OpcaoSimples=%s,\n' % quote_python(self.OpcaoSimples).encode(ExternalEncoding))
        if self.NumeroGuia is not None:
            showIndent(outfile, level)
            outfile.write('NumeroGuia=%d,\n' % self.NumeroGuia)
        if self.DataQuitacaoGuia is not None:
            showIndent(outfile, level)
            outfile.write('DataQuitacaoGuia=%s,\n' % quote_python(self.DataQuitacaoGuia).encode(ExternalEncoding))
        if self.ValorServicos is not None:
            showIndent(outfile, level)
            outfile.write('ValorServicos=%f,\n' % self.ValorServicos)
        if self.ValorDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('ValorDeducoes=%f,\n' % self.ValorDeducoes)
        if self.ValorPIS is not None:
            showIndent(outfile, level)
            outfile.write('ValorPIS=%f,\n' % self.ValorPIS)
        if self.ValorCOFINS is not None:
            showIndent(outfile, level)
            outfile.write('ValorCOFINS=%f,\n' % self.ValorCOFINS)
        if self.ValorINSS is not None:
            showIndent(outfile, level)
            outfile.write('ValorINSS=%f,\n' % self.ValorINSS)
        if self.ValorIR is not None:
            showIndent(outfile, level)
            outfile.write('ValorIR=%f,\n' % self.ValorIR)
        if self.ValorCSLL is not None:
            showIndent(outfile, level)
            outfile.write('ValorCSLL=%f,\n' % self.ValorCSLL)
        if self.CodigoServico is not None:
            showIndent(outfile, level)
            outfile.write('CodigoServico=%d,\n' % self.CodigoServico)
        if self.AliquotaServicos is not None:
            showIndent(outfile, level)
            outfile.write('AliquotaServicos=%f,\n' % self.AliquotaServicos)
        if self.ValorISS is not None:
            showIndent(outfile, level)
            outfile.write('ValorISS=%f,\n' % self.ValorISS)
        if self.ValorCredito is not None:
            showIndent(outfile, level)
            outfile.write('ValorCredito=%f,\n' % self.ValorCredito)
        if self.ISSRetido is not None:
            showIndent(outfile, level)
            outfile.write('ISSRetido=%s,\n' % self.ISSRetido)
        if self.CPFCNPJTomador is not None:
            showIndent(outfile, level)
            outfile.write('CPFCNPJTomador=model_.tpCPFCNPJ(\n')
            self.CPFCNPJTomador.exportLiteral(outfile, level, name_='CPFCNPJTomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipalTomador=%d,\n' % self.InscricaoMunicipalTomador)
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoEstadualTomador=%d,\n' % self.InscricaoEstadualTomador)
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level)
            outfile.write('RazaoSocialTomador=%s,\n' % quote_python(self.RazaoSocialTomador).encode(ExternalEncoding))
        if self.EnderecoTomador is not None:
            showIndent(outfile, level)
            outfile.write('EnderecoTomador=model_.tpEndereco(\n')
            self.EnderecoTomador.exportLiteral(outfile, level, name_='EnderecoTomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EmailTomador is not None:
            showIndent(outfile, level)
            outfile.write('EmailTomador=%s,\n' % quote_python(self.EmailTomador).encode(ExternalEncoding))
        if self.Discriminacao is not None:
            showIndent(outfile, level)
            outfile.write('Discriminacao=%s,\n' % quote_python(self.Discriminacao).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assinatura':
            Assinatura_ = child_.text
            Assinatura_ = self.gds_validate_string(Assinatura_, node, 'Assinatura')
            self.Assinatura = Assinatura_
            self.validate_tpAssinatura(self.Assinatura)    # validate type tpAssinatura
        elif nodeName_ == 'ChaveNFe':
            obj_ = tpChaveNFe.factory()
            obj_.build(child_)
            self.set_ChaveNFe(obj_)
        elif nodeName_ == 'DataEmissaoNFe':
            DataEmissaoNFe_ = child_.text
            DataEmissaoNFe_ = self.gds_validate_string(DataEmissaoNFe_, node, 'DataEmissaoNFe')
            self.DataEmissaoNFe = DataEmissaoNFe_
        elif nodeName_ == 'NumeroLote':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            self.validate_tpNumero(self.NumeroLote)    # validate type tpNumero
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory()
            obj_.build(child_)
            self.set_ChaveRPS(obj_)
        elif nodeName_ == 'TipoRPS':
            TipoRPS_ = child_.text
            TipoRPS_ = self.gds_validate_string(TipoRPS_, node, 'TipoRPS')
            self.TipoRPS = TipoRPS_
            self.validate_tpTipoRPS(self.TipoRPS)    # validate type tpTipoRPS
        elif nodeName_ == 'DataEmissaoRPS':
            DataEmissaoRPS_ = child_.text
            DataEmissaoRPS_ = self.gds_validate_string(DataEmissaoRPS_, node, 'DataEmissaoRPS')
            self.DataEmissaoRPS = DataEmissaoRPS_
        elif nodeName_ == 'CPFCNPJPrestador':
            obj_ = tpCPFCNPJ.factory()
            obj_.build(child_)
            self.set_CPFCNPJPrestador(obj_)
        elif nodeName_ == 'RazaoSocialPrestador':
            RazaoSocialPrestador_ = child_.text
            RazaoSocialPrestador_ = self.gds_validate_string(RazaoSocialPrestador_, node, 'RazaoSocialPrestador')
            self.RazaoSocialPrestador = RazaoSocialPrestador_
            self.validate_tpRazaoSocial(self.RazaoSocialPrestador)    # validate type tpRazaoSocial
        elif nodeName_ == 'EnderecoPrestador':
            obj_ = tpEndereco.factory()
            obj_.build(child_)
            self.set_EnderecoPrestador(obj_)
        elif nodeName_ == 'EmailPrestador':
            EmailPrestador_ = child_.text
            EmailPrestador_ = self.gds_validate_string(EmailPrestador_, node, 'EmailPrestador')
            self.EmailPrestador = EmailPrestador_
            self.validate_tpEmail(self.EmailPrestador)    # validate type tpEmail
        elif nodeName_ == 'StatusNFe':
            StatusNFe_ = child_.text
            StatusNFe_ = self.gds_validate_string(StatusNFe_, node, 'StatusNFe')
            self.StatusNFe = StatusNFe_
            self.validate_tpStatusNFe(self.StatusNFe)    # validate type tpStatusNFe
        elif nodeName_ == 'DataCancelamento':
            DataCancelamento_ = child_.text
            DataCancelamento_ = self.gds_validate_string(DataCancelamento_, node, 'DataCancelamento')
            self.DataCancelamento = DataCancelamento_
        elif nodeName_ == 'TributacaoNFe':
            TributacaoNFe_ = child_.text
            TributacaoNFe_ = self.gds_validate_string(TributacaoNFe_, node, 'TributacaoNFe')
            self.TributacaoNFe = TributacaoNFe_
            self.validate_tpTributacaoNFe(self.TributacaoNFe)    # validate type tpTributacaoNFe
        elif nodeName_ == 'OpcaoSimples':
            OpcaoSimples_ = child_.text
            OpcaoSimples_ = self.gds_validate_string(OpcaoSimples_, node, 'OpcaoSimples')
            self.OpcaoSimples = OpcaoSimples_
            self.validate_tpOpcaoSimples(self.OpcaoSimples)    # validate type tpOpcaoSimples
        elif nodeName_ == 'NumeroGuia':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroGuia')
            self.NumeroGuia = ival_
            self.validate_tpNumero(self.NumeroGuia)    # validate type tpNumero
        elif nodeName_ == 'DataQuitacaoGuia':
            DataQuitacaoGuia_ = child_.text
            DataQuitacaoGuia_ = self.gds_validate_string(DataQuitacaoGuia_, node, 'DataQuitacaoGuia')
            self.DataQuitacaoGuia = DataQuitacaoGuia_
        elif nodeName_ == 'ValorServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            self.validate_tpValor(self.ValorServicos)    # validate type tpValor
        elif nodeName_ == 'ValorDeducoes':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            self.validate_tpValor(self.ValorDeducoes)    # validate type tpValor
        elif nodeName_ == 'ValorPIS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPIS')
            self.ValorPIS = fval_
            self.validate_tpValor(self.ValorPIS)    # validate type tpValor
        elif nodeName_ == 'ValorCOFINS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCOFINS')
            self.ValorCOFINS = fval_
            self.validate_tpValor(self.ValorCOFINS)    # validate type tpValor
        elif nodeName_ == 'ValorINSS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorINSS')
            self.ValorINSS = fval_
            self.validate_tpValor(self.ValorINSS)    # validate type tpValor
        elif nodeName_ == 'ValorIR':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIR')
            self.ValorIR = fval_
            self.validate_tpValor(self.ValorIR)    # validate type tpValor
        elif nodeName_ == 'ValorCSLL':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCSLL')
            self.ValorCSLL = fval_
            self.validate_tpValor(self.ValorCSLL)    # validate type tpValor
        elif nodeName_ == 'CodigoServico':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoServico')
            self.CodigoServico = ival_
            self.validate_tpCodigoServico(self.CodigoServico)    # validate type tpCodigoServico
        elif nodeName_ == 'AliquotaServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AliquotaServicos')
            self.AliquotaServicos = fval_
            self.validate_tpAliquota(self.AliquotaServicos)    # validate type tpAliquota
        elif nodeName_ == 'ValorISS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorISS')
            self.ValorISS = fval_
            self.validate_tpValor(self.ValorISS)    # validate type tpValor
        elif nodeName_ == 'ValorCredito':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCredito')
            self.ValorCredito = fval_
            self.validate_tpValor(self.ValorCredito)    # validate type tpValor
        elif nodeName_ == 'ISSRetido':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ISSRetido')
            self.ISSRetido = ival_
        elif nodeName_ == 'CPFCNPJTomador':
            obj_ = tpCPFCNPJ.factory()
            obj_.build(child_)
            self.set_CPFCNPJTomador(obj_)
        elif nodeName_ == 'InscricaoMunicipalTomador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalTomador')
            self.InscricaoMunicipalTomador = ival_
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)    # validate type tpInscricaoMunicipal
        elif nodeName_ == 'InscricaoEstadualTomador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoEstadualTomador')
            self.InscricaoEstadualTomador = ival_
            self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)    # validate type tpInscricaoEstadual
        elif nodeName_ == 'RazaoSocialTomador':
            RazaoSocialTomador_ = child_.text
            RazaoSocialTomador_ = self.gds_validate_string(RazaoSocialTomador_, node, 'RazaoSocialTomador')
            self.RazaoSocialTomador = RazaoSocialTomador_
            self.validate_tpRazaoSocial(self.RazaoSocialTomador)    # validate type tpRazaoSocial
        elif nodeName_ == 'EnderecoTomador':
            obj_ = tpEndereco.factory()
            obj_.build(child_)
            self.set_EnderecoTomador(obj_)
        elif nodeName_ == 'EmailTomador':
            EmailTomador_ = child_.text
            EmailTomador_ = self.gds_validate_string(EmailTomador_, node, 'EmailTomador')
            self.EmailTomador = EmailTomador_
            self.validate_tpEmail(self.EmailTomador)    # validate type tpEmail
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            self.validate_tpDiscriminacao(self.Discriminacao)    # validate type tpDiscriminacao
# end class tpNFe


class tpRPS(GeneratedsSuper):
    """Tipo que representa um RPS."""
    subclass = None
    superclass = None
    def __init__(self, Assinatura=None, ChaveRPS=None, TipoRPS=None, DataEmissao=None, StatusRPS=None, TributacaoRPS=None, ValorServicos=None, ValorDeducoes=None, ValorPIS=None, ValorCOFINS=None, ValorINSS=None, ValorIR=None, ValorCSLL=None, CodigoServico=None, AliquotaServicos=None, ISSRetido=None, CPFCNPJTomador=None, InscricaoMunicipalTomador=None, InscricaoEstadualTomador=None, RazaoSocialTomador=None, EnderecoTomador=None, EmailTomador=None, Discriminacao=None):
        self.Assinatura = Assinatura
        self.ChaveRPS = ChaveRPS
        self.TipoRPS = TipoRPS
        self.DataEmissao = DataEmissao
        self.StatusRPS = StatusRPS
        self.TributacaoRPS = TributacaoRPS
        self.ValorServicos = ValorServicos
        self.ValorDeducoes = ValorDeducoes
        self.ValorPIS = ValorPIS
        self.ValorCOFINS = ValorCOFINS
        self.ValorINSS = ValorINSS
        self.ValorIR = ValorIR
        self.ValorCSLL = ValorCSLL
        self.CodigoServico = CodigoServico
        self.AliquotaServicos = AliquotaServicos
        self.ISSRetido = ISSRetido
        self.CPFCNPJTomador = CPFCNPJTomador
        self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
        self.InscricaoEstadualTomador = InscricaoEstadualTomador
        self.RazaoSocialTomador = RazaoSocialTomador
        self.EnderecoTomador = EnderecoTomador
        self.EmailTomador = EmailTomador
        self.Discriminacao = Discriminacao
    def factory(*args_, **kwargs_):
        if tpRPS.subclass:
            return tpRPS.subclass(*args_, **kwargs_)
        else:
            return tpRPS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Assinatura(self): return self.Assinatura
    def set_Assinatura(self, Assinatura): self.Assinatura = Assinatura
    def validate_tpAssinatura(self, value):
        # Validate type tpAssinatura, a restriction on xs:base64Binary.
        pass
    def get_ChaveRPS(self): return self.ChaveRPS
    def set_ChaveRPS(self, ChaveRPS): self.ChaveRPS = ChaveRPS
    def get_TipoRPS(self): return self.TipoRPS
    def set_TipoRPS(self, TipoRPS): self.TipoRPS = TipoRPS
    def validate_tpTipoRPS(self, value):
        # Validate type tpTipoRPS, a restriction on xs:string.
        pass
    def get_DataEmissao(self): return self.DataEmissao
    def set_DataEmissao(self, DataEmissao): self.DataEmissao = DataEmissao
    def get_StatusRPS(self): return self.StatusRPS
    def set_StatusRPS(self, StatusRPS): self.StatusRPS = StatusRPS
    def validate_tpStatusNFe(self, value):
        # Validate type tpStatusNFe, a restriction on xs:string.
        pass
    def get_TributacaoRPS(self): return self.TributacaoRPS
    def set_TributacaoRPS(self, TributacaoRPS): self.TributacaoRPS = TributacaoRPS
    def validate_tpTributacaoNFe(self, value):
        # Validate type tpTributacaoNFe, a restriction on xs:string.
        pass
    def get_ValorServicos(self): return self.ValorServicos
    def set_ValorServicos(self, ValorServicos): self.ValorServicos = ValorServicos
    def validate_tpValor(self, value):
        # Validate type tpValor, a restriction on xs:decimal.
        pass
    def get_ValorDeducoes(self): return self.ValorDeducoes
    def set_ValorDeducoes(self, ValorDeducoes): self.ValorDeducoes = ValorDeducoes
    def get_ValorPIS(self): return self.ValorPIS
    def set_ValorPIS(self, ValorPIS): self.ValorPIS = ValorPIS
    def get_ValorCOFINS(self): return self.ValorCOFINS
    def set_ValorCOFINS(self, ValorCOFINS): self.ValorCOFINS = ValorCOFINS
    def get_ValorINSS(self): return self.ValorINSS
    def set_ValorINSS(self, ValorINSS): self.ValorINSS = ValorINSS
    def get_ValorIR(self): return self.ValorIR
    def set_ValorIR(self, ValorIR): self.ValorIR = ValorIR
    def get_ValorCSLL(self): return self.ValorCSLL
    def set_ValorCSLL(self, ValorCSLL): self.ValorCSLL = ValorCSLL
    def get_CodigoServico(self): return self.CodigoServico
    def set_CodigoServico(self, CodigoServico): self.CodigoServico = CodigoServico
    def validate_tpCodigoServico(self, value):
        # Validate type tpCodigoServico, a restriction on xs:int.
        pass
    def get_AliquotaServicos(self): return self.AliquotaServicos
    def set_AliquotaServicos(self, AliquotaServicos): self.AliquotaServicos = AliquotaServicos
    def validate_tpAliquota(self, value):
        # Validate type tpAliquota, a restriction on xs:decimal.
        pass
    def get_ISSRetido(self): return self.ISSRetido
    def set_ISSRetido(self, ISSRetido): self.ISSRetido = ISSRetido
    def get_CPFCNPJTomador(self): return self.CPFCNPJTomador
    def set_CPFCNPJTomador(self, CPFCNPJTomador): self.CPFCNPJTomador = CPFCNPJTomador
    def get_InscricaoMunicipalTomador(self): return self.InscricaoMunicipalTomador
    def set_InscricaoMunicipalTomador(self, InscricaoMunicipalTomador): self.InscricaoMunicipalTomador = InscricaoMunicipalTomador
    def validate_tpInscricaoMunicipal(self, value):
        # Validate type tpInscricaoMunicipal, a restriction on xs:long.
        pass
    def get_InscricaoEstadualTomador(self): return self.InscricaoEstadualTomador
    def set_InscricaoEstadualTomador(self, InscricaoEstadualTomador): self.InscricaoEstadualTomador = InscricaoEstadualTomador
    def validate_tpInscricaoEstadual(self, value):
        # Validate type tpInscricaoEstadual, a restriction on xs:long.
        pass
    def get_RazaoSocialTomador(self): return self.RazaoSocialTomador
    def set_RazaoSocialTomador(self, RazaoSocialTomador): self.RazaoSocialTomador = RazaoSocialTomador
    def validate_tpRazaoSocial(self, value):
        # Validate type tpRazaoSocial, a restriction on xs:string.
        pass
    def get_EnderecoTomador(self): return self.EnderecoTomador
    def set_EnderecoTomador(self, EnderecoTomador): self.EnderecoTomador = EnderecoTomador
    def get_EmailTomador(self): return self.EmailTomador
    def set_EmailTomador(self, EmailTomador): self.EmailTomador = EmailTomador
    def validate_tpEmail(self, value):
        # Validate type tpEmail, a restriction on xs:string.
        pass
    def get_Discriminacao(self): return self.Discriminacao
    def set_Discriminacao(self, Discriminacao): self.Discriminacao = Discriminacao
    def validate_tpDiscriminacao(self, value):
        # Validate type tpDiscriminacao, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='tpRPS', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpRPS')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpRPS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpRPS', fromsubclass_=False):
        if self.Assinatura is not None:
            showIndent(outfile, level)
            outfile.write('<%sAssinatura>%s</%sAssinatura>\n' % (namespace_, self.gds_format_string(quote_xml(self.Assinatura).encode(ExternalEncoding), input_name='Assinatura'), namespace_))
        if self.ChaveRPS is not None:
            self.ChaveRPS.export(outfile, level, namespace_, name_='ChaveRPS', )
        if self.TipoRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sTipoRPS>%s</%sTipoRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.TipoRPS).encode(ExternalEncoding), input_name='TipoRPS'), namespace_))
        if self.DataEmissao is not None:
            showIndent(outfile, level)
            outfile.write('<%sDataEmissao>%s</%sDataEmissao>\n' % (namespace_, self.gds_format_string(quote_xml(self.DataEmissao).encode(ExternalEncoding), input_name='DataEmissao'), namespace_))
        if self.StatusRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusRPS>%s</%sStatusRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusRPS).encode(ExternalEncoding), input_name='StatusRPS'), namespace_))
        if self.TributacaoRPS is not None:
            showIndent(outfile, level)
            outfile.write('<%sTributacaoRPS>%s</%sTributacaoRPS>\n' % (namespace_, self.gds_format_string(quote_xml(self.TributacaoRPS).encode(ExternalEncoding), input_name='TributacaoRPS'), namespace_))
        if self.ValorServicos is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorServicos>%s</%sValorServicos>\n' % (namespace_, self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespace_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>\n' % (namespace_, self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespace_))
        if self.ValorPIS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorPIS>%s</%sValorPIS>\n' % (namespace_, self.gds_format_float(self.ValorPIS, input_name='ValorPIS'), namespace_))
        if self.ValorCOFINS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorCOFINS>%s</%sValorCOFINS>\n' % (namespace_, self.gds_format_float(self.ValorCOFINS, input_name='ValorCOFINS'), namespace_))
        if self.ValorINSS is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorINSS>%s</%sValorINSS>\n' % (namespace_, self.gds_format_float(self.ValorINSS, input_name='ValorINSS'), namespace_))
        if self.ValorIR is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorIR>%s</%sValorIR>\n' % (namespace_, self.gds_format_float(self.ValorIR, input_name='ValorIR'), namespace_))
        if self.ValorCSLL is not None:
            showIndent(outfile, level)
            outfile.write('<%sValorCSLL>%s</%sValorCSLL>\n' % (namespace_, self.gds_format_float(self.ValorCSLL, input_name='ValorCSLL'), namespace_))
        if self.CodigoServico is not None:
            showIndent(outfile, level)
            outfile.write('<%sCodigoServico>%s</%sCodigoServico>\n' % (namespace_, self.gds_format_integer(self.CodigoServico, input_name='CodigoServico'), namespace_))
        if self.AliquotaServicos is not None:
            showIndent(outfile, level)
            outfile.write('<%sAliquotaServicos>%s</%sAliquotaServicos>\n' % (namespace_, self.gds_format_float(self.AliquotaServicos, input_name='AliquotaServicos'), namespace_))
        if self.ISSRetido is not None:
            showIndent(outfile, level)
            outfile.write('<%sISSRetido>%s</%sISSRetido>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ISSRetido)), input_name='ISSRetido'), namespace_))
        if self.CPFCNPJTomador is not None:
            self.CPFCNPJTomador.export(outfile, level, namespace_, name_='CPFCNPJTomador')
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoMunicipalTomador>%s</%sInscricaoMunicipalTomador>\n' % (namespace_, self.gds_format_integer(self.InscricaoMunicipalTomador, input_name='InscricaoMunicipalTomador'), namespace_))
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sInscricaoEstadualTomador>%s</%sInscricaoEstadualTomador>\n' % (namespace_, self.gds_format_integer(self.InscricaoEstadualTomador, input_name='InscricaoEstadualTomador'), namespace_))
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sRazaoSocialTomador>%s</%sRazaoSocialTomador>\n' % (namespace_, self.gds_format_string(quote_xml(self.RazaoSocialTomador).encode(ExternalEncoding), input_name='RazaoSocialTomador'), namespace_))
        if self.EnderecoTomador is not None:
            self.EnderecoTomador.export(outfile, level, namespace_, name_='EnderecoTomador')
        if self.EmailTomador is not None:
            showIndent(outfile, level)
            outfile.write('<%sEmailTomador>%s</%sEmailTomador>\n' % (namespace_, self.gds_format_string(quote_xml(self.EmailTomador).encode(ExternalEncoding), input_name='EmailTomador'), namespace_))
        if self.Discriminacao is not None:
            showIndent(outfile, level)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>\n' % (namespace_, self.gds_format_string(quote_xml(self.Discriminacao).encode(ExternalEncoding), input_name='Discriminacao'), namespace_))
    def hasContent_(self):
        if (
            self.Assinatura is not None or
            self.ChaveRPS is not None or
            self.TipoRPS is not None or
            self.DataEmissao is not None or
            self.StatusRPS is not None or
            self.TributacaoRPS is not None or
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPIS is not None or
            self.ValorCOFINS is not None or
            self.ValorINSS is not None or
            self.ValorIR is not None or
            self.ValorCSLL is not None or
            self.CodigoServico is not None or
            self.AliquotaServicos is not None or
            self.ISSRetido is not None or
            self.CPFCNPJTomador is not None or
            self.InscricaoMunicipalTomador is not None or
            self.InscricaoEstadualTomador is not None or
            self.RazaoSocialTomador is not None or
            self.EnderecoTomador is not None or
            self.EmailTomador is not None or
            self.Discriminacao is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='tpRPS'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Assinatura is not None:
            showIndent(outfile, level)
            outfile.write('Assinatura=%s,\n' % quote_python(self.Assinatura).encode(ExternalEncoding))
        if self.ChaveRPS is not None:
            showIndent(outfile, level)
            outfile.write('ChaveRPS=model_.tpChaveRPS(\n')
            self.ChaveRPS.exportLiteral(outfile, level, name_='ChaveRPS')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TipoRPS is not None:
            showIndent(outfile, level)
            outfile.write('TipoRPS=%s,\n' % quote_python(self.TipoRPS).encode(ExternalEncoding))
        if self.DataEmissao is not None:
            showIndent(outfile, level)
            outfile.write('DataEmissao=%s,\n' % quote_python(self.DataEmissao).encode(ExternalEncoding))
        if self.StatusRPS is not None:
            showIndent(outfile, level)
            outfile.write('StatusRPS=%s,\n' % quote_python(self.StatusRPS).encode(ExternalEncoding))
        if self.TributacaoRPS is not None:
            showIndent(outfile, level)
            outfile.write('TributacaoRPS=%s,\n' % quote_python(self.TributacaoRPS).encode(ExternalEncoding))
        if self.ValorServicos is not None:
            showIndent(outfile, level)
            outfile.write('ValorServicos=%f,\n' % self.ValorServicos)
        if self.ValorDeducoes is not None:
            showIndent(outfile, level)
            outfile.write('ValorDeducoes=%f,\n' % self.ValorDeducoes)
        if self.ValorPIS is not None:
            showIndent(outfile, level)
            outfile.write('ValorPIS=%f,\n' % self.ValorPIS)
        if self.ValorCOFINS is not None:
            showIndent(outfile, level)
            outfile.write('ValorCOFINS=%f,\n' % self.ValorCOFINS)
        if self.ValorINSS is not None:
            showIndent(outfile, level)
            outfile.write('ValorINSS=%f,\n' % self.ValorINSS)
        if self.ValorIR is not None:
            showIndent(outfile, level)
            outfile.write('ValorIR=%f,\n' % self.ValorIR)
        if self.ValorCSLL is not None:
            showIndent(outfile, level)
            outfile.write('ValorCSLL=%f,\n' % self.ValorCSLL)
        if self.CodigoServico is not None:
            showIndent(outfile, level)
            outfile.write('CodigoServico=%d,\n' % self.CodigoServico)
        if self.AliquotaServicos is not None:
            showIndent(outfile, level)
            outfile.write('AliquotaServicos=%f,\n' % self.AliquotaServicos)
        if self.ISSRetido is not None:
            showIndent(outfile, level)
            outfile.write('ISSRetido=%s,\n' % self.ISSRetido)
        if self.CPFCNPJTomador is not None:
            showIndent(outfile, level)
            outfile.write('CPFCNPJTomador=model_.tpCPFCNPJ(\n')
            self.CPFCNPJTomador.exportLiteral(outfile, level, name_='CPFCNPJTomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InscricaoMunicipalTomador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoMunicipalTomador=%d,\n' % self.InscricaoMunicipalTomador)
        if self.InscricaoEstadualTomador is not None:
            showIndent(outfile, level)
            outfile.write('InscricaoEstadualTomador=%d,\n' % self.InscricaoEstadualTomador)
        if self.RazaoSocialTomador is not None:
            showIndent(outfile, level)
            outfile.write('RazaoSocialTomador=%s,\n' % quote_python(self.RazaoSocialTomador).encode(ExternalEncoding))
        if self.EnderecoTomador is not None:
            showIndent(outfile, level)
            outfile.write('EnderecoTomador=model_.tpEndereco(\n')
            self.EnderecoTomador.exportLiteral(outfile, level, name_='EnderecoTomador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EmailTomador is not None:
            showIndent(outfile, level)
            outfile.write('EmailTomador=%s,\n' % quote_python(self.EmailTomador).encode(ExternalEncoding))
        if self.Discriminacao is not None:
            showIndent(outfile, level)
            outfile.write('Discriminacao=%s,\n' % quote_python(self.Discriminacao).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assinatura':
            Assinatura_ = child_.text
            Assinatura_ = self.gds_validate_string(Assinatura_, node, 'Assinatura')
            self.Assinatura = Assinatura_
            self.validate_tpAssinatura(self.Assinatura)    # validate type tpAssinatura
        elif nodeName_ == 'ChaveRPS':
            obj_ = tpChaveRPS.factory()
            obj_.build(child_)
            self.set_ChaveRPS(obj_)
        elif nodeName_ == 'TipoRPS':
            TipoRPS_ = child_.text
            TipoRPS_ = self.gds_validate_string(TipoRPS_, node, 'TipoRPS')
            self.TipoRPS = TipoRPS_
            self.validate_tpTipoRPS(self.TipoRPS)    # validate type tpTipoRPS
        elif nodeName_ == 'DataEmissao':
            DataEmissao_ = child_.text
            DataEmissao_ = self.gds_validate_string(DataEmissao_, node, 'DataEmissao')
            self.DataEmissao = DataEmissao_
        elif nodeName_ == 'StatusRPS':
            StatusRPS_ = child_.text
            StatusRPS_ = self.gds_validate_string(StatusRPS_, node, 'StatusRPS')
            self.StatusRPS = StatusRPS_
            self.validate_tpStatusNFe(self.StatusRPS)    # validate type tpStatusNFe
        elif nodeName_ == 'TributacaoRPS':
            TributacaoRPS_ = child_.text
            TributacaoRPS_ = self.gds_validate_string(TributacaoRPS_, node, 'TributacaoRPS')
            self.TributacaoRPS = TributacaoRPS_
            self.validate_tpTributacaoNFe(self.TributacaoRPS)    # validate type tpTributacaoNFe
        elif nodeName_ == 'ValorServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            self.validate_tpValor(self.ValorServicos)    # validate type tpValor
        elif nodeName_ == 'ValorDeducoes':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            self.validate_tpValor(self.ValorDeducoes)    # validate type tpValor
        elif nodeName_ == 'ValorPIS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPIS')
            self.ValorPIS = fval_
            self.validate_tpValor(self.ValorPIS)    # validate type tpValor
        elif nodeName_ == 'ValorCOFINS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCOFINS')
            self.ValorCOFINS = fval_
            self.validate_tpValor(self.ValorCOFINS)    # validate type tpValor
        elif nodeName_ == 'ValorINSS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorINSS')
            self.ValorINSS = fval_
            self.validate_tpValor(self.ValorINSS)    # validate type tpValor
        elif nodeName_ == 'ValorIR':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIR')
            self.ValorIR = fval_
            self.validate_tpValor(self.ValorIR)    # validate type tpValor
        elif nodeName_ == 'ValorCSLL':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCSLL')
            self.ValorCSLL = fval_
            self.validate_tpValor(self.ValorCSLL)    # validate type tpValor
        elif nodeName_ == 'CodigoServico':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoServico')
            self.CodigoServico = ival_
            self.validate_tpCodigoServico(self.CodigoServico)    # validate type tpCodigoServico
        elif nodeName_ == 'AliquotaServicos':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AliquotaServicos')
            self.AliquotaServicos = fval_
            self.validate_tpAliquota(self.AliquotaServicos)    # validate type tpAliquota
        elif nodeName_ == 'ISSRetido':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ISSRetido')
            self.ISSRetido = ival_
        elif nodeName_ == 'CPFCNPJTomador':
            obj_ = tpCPFCNPJ.factory()
            obj_.build(child_)
            self.set_CPFCNPJTomador(obj_)
        elif nodeName_ == 'InscricaoMunicipalTomador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoMunicipalTomador')
            self.InscricaoMunicipalTomador = ival_
            self.validate_tpInscricaoMunicipal(self.InscricaoMunicipalTomador)    # validate type tpInscricaoMunicipal
        elif nodeName_ == 'InscricaoEstadualTomador':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'InscricaoEstadualTomador')
            self.InscricaoEstadualTomador = ival_
            self.validate_tpInscricaoEstadual(self.InscricaoEstadualTomador)    # validate type tpInscricaoEstadual
        elif nodeName_ == 'RazaoSocialTomador':
            RazaoSocialTomador_ = child_.text
            RazaoSocialTomador_ = self.gds_validate_string(RazaoSocialTomador_, node, 'RazaoSocialTomador')
            self.RazaoSocialTomador = RazaoSocialTomador_
            self.validate_tpRazaoSocial(self.RazaoSocialTomador)    # validate type tpRazaoSocial
        elif nodeName_ == 'EnderecoTomador':
            obj_ = tpEndereco.factory()
            obj_.build(child_)
            self.set_EnderecoTomador(obj_)
        elif nodeName_ == 'EmailTomador':
            EmailTomador_ = child_.text
            EmailTomador_ = self.gds_validate_string(EmailTomador_, node, 'EmailTomador')
            self.EmailTomador = EmailTomador_
            self.validate_tpEmail(self.EmailTomador)    # validate type tpEmail
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            self.validate_tpDiscriminacao(self.Discriminacao)    # validate type tpDiscriminacao
# end class tpRPS


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None):
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
    def factory(*args_, **kwargs_):
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='', name_='SignatureType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureType', fromsubclass_=False):
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_, name_='SignedInfo', )
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_, name_='SignatureValue', )
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_, name_='KeyInfo', )
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = "%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SignedInfo is not None:
            showIndent(outfile, level)
            outfile.write('SignedInfo=model_.SignedInfoType(\n')
            self.SignedInfo.exportLiteral(outfile, level, name_='SignedInfo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureValue is not None:
            showIndent(outfile, level)
            outfile.write('SignatureValue=model_.SignatureValueType(\n')
            self.SignatureValue.exportLiteral(outfile, level, name_='SignatureValue')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.KeyInfo is not None:
            showIndent(outfile, level)
            outfile.write('KeyInfo=model_.KeyInfoType(\n')
            self.KeyInfo.exportLiteral(outfile, level, name_='KeyInfo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.set_SignedInfo(obj_)
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.set_SignatureValue(obj_)
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.set_KeyInfo(obj_)
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='SignatureValueType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureValueType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = "%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='', name_='SignedInfoType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignedInfoType', fromsubclass_=False):
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_, name_='CanonicalizationMethod', )
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_, name_='SignatureMethod', )
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_, name_='Reference')
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignedInfoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = "%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CanonicalizationMethod is not None:
            showIndent(outfile, level)
            outfile.write('CanonicalizationMethod=model_.CanonicalizationMethodType(\n')
            self.CanonicalizationMethod.exportLiteral(outfile, level, name_='CanonicalizationMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureMethod is not None:
            showIndent(outfile, level)
            outfile.write('SignatureMethod=model_.SignatureMethodType(\n')
            self.SignatureMethod.exportLiteral(outfile, level, name_='SignatureMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.ReferenceType(\n')
            Reference_.exportLiteral(outfile, level, name_='ReferenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.set_CanonicalizationMethod(obj_)
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.set_SignatureMethod(obj_)
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
# end class SignedInfoType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, URI=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.Type = _cast(None, Type)
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def validate_DigestValueType(self, value):
        # Validate type DigestValueType, a restriction on xs:base64Binary.
        pass
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            outfile.write(' URI=%s' % (self.gds_format_string(quote_attrib(self.URI).encode(ExternalEncoding), input_name='URI'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False):
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_, name_='Transforms', )
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_, name_='DigestMethod', )
        if self.DigestValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sDigestValue>%s</%sDigestValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.DigestValue).encode(ExternalEncoding), input_name='DigestValue'), namespace_))
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            showIndent(outfile, level)
            outfile.write('Type = "%s",\n' % (self.Type,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = "%s",\n' % (self.Id,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            showIndent(outfile, level)
            outfile.write('URI = "%s",\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.TransformsType(\n')
            self.Transforms.exportLiteral(outfile, level, name_='Transforms')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestMethod is not None:
            showIndent(outfile, level)
            outfile.write('DigestMethod=model_.DigestMethodType(\n')
            self.DigestMethod.exportLiteral(outfile, level, name_='DigestMethod')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestValue is not None:
            showIndent(outfile, level)
            outfile.write('DigestValue=%s,\n' % quote_python(self.DigestValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.append('Type')
            self.Type = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.append('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.set_Transforms(obj_)
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.set_DigestMethod(obj_)
        elif nodeName_ == 'DigestValue':
            DigestValue_ = child_.text
            DigestValue_ = self.gds_validate_string(DigestValue_, node, 'DigestValue')
            self.DigestValue = DigestValue_
            self.validate_DigestValueType(self.DigestValue)    # validate type DigestValueType
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform(self, index, value): self.Transform[index] = value
    def export(self, outfile, level, namespace_='', name_='TransformsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransformsType', fromsubclass_=False):
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_, name_='Transform')
    def hasContent_(self):
        if (
            self.Transform
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransformsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Transform=[\n')
        level += 1
        for Transform_ in self.Transform:
            showIndent(outfile, level)
            outfile.write('model_.TransformType(\n')
            Transform_.exportLiteral(outfile, level, name_='TransformType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, XPath=None):
        self.Algorithm = _cast(None, Algorithm)
        self.XPath = XPath
    def factory(*args_, **kwargs_):
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def export(self, outfile, level, namespace_='', name_='TransformType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TransformType', fromsubclass_=False):
        if self.XPath is not None:
            showIndent(outfile, level)
            outfile.write('<%sXPath>%s</%sXPath>\n' % (namespace_, self.gds_format_string(quote_xml(self.XPath).encode(ExternalEncoding), input_name='XPath'), namespace_))
    def hasContent_(self):
        if (
            self.XPath is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransformType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = "%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.XPath is not None:
            showIndent(outfile, level)
            outfile.write('XPath=%s,\n' % quote_python(self.XPath).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'XPath':
            XPath_ = child_.text
            XPath_ = self.gds_validate_string(XPath_, node, 'XPath')
            self.XPath = XPath_
# end class TransformType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, X509Data=None):
        self.Id = _cast(None, Id)
        self.X509Data = X509Data
    def factory(*args_, **kwargs_):
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def export(self, outfile, level, namespace_='', name_='KeyInfoType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='KeyInfoType', fromsubclass_=False):
        if self.X509Data is not None:
            self.X509Data.export(outfile, level, namespace_, name_='X509Data', )
    def hasContent_(self):
        if (
            self.X509Data is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='KeyInfoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            showIndent(outfile, level)
            outfile.write('Id = "%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509Data is not None:
            showIndent(outfile, level)
            outfile.write('X509Data=model_.X509DataType(\n')
            self.X509Data.exportLiteral(outfile, level, name_='X509Data')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.append('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            self.set_X509Data(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RSAKeyValue=None):
        self.RSAKeyValue = RSAKeyValue
    def factory(*args_, **kwargs_):
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def export(self, outfile, level, namespace_='', name_='KeyValueType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='KeyValueType', fromsubclass_=False):
        if self.RSAKeyValue is not None:
            self.RSAKeyValue.export(outfile, level, namespace_, name_='RSAKeyValue', )
    def hasContent_(self):
        if (
            self.RSAKeyValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='KeyValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RSAKeyValue is not None:
            showIndent(outfile, level)
            outfile.write('RSAKeyValue=model_.RSAKeyValueType(\n')
            self.RSAKeyValue.exportLiteral(outfile, level, name_='RSAKeyValue')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory()
            obj_.build(child_)
            self.set_RSAKeyValue(obj_)
# end class KeyValueType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509Certificate=None):
        self.X509Certificate = X509Certificate
    def factory(*args_, **kwargs_):
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def export(self, outfile, level, namespace_='', name_='X509DataType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='X509DataType', fromsubclass_=False):
        if self.X509Certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>\n' % (namespace_, self.gds_format_string(quote_xml(self.X509Certificate).encode(ExternalEncoding), input_name='X509Certificate'), namespace_))
    def hasContent_(self):
        if (
            self.X509Certificate is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='X509DataType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509Certificate is not None:
            showIndent(outfile, level)
            outfile.write('X509Certificate=%s,\n' % quote_python(self.X509Certificate).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(X509Certificate_, node, 'X509Certificate')
            self.X509Certificate = X509Certificate_
# end class X509DataType


class CabecalhoType(GeneratedsSuper):
    """Versão do Schema XML utilizado."""
    subclass = None
    superclass = None
    def __init__(self, Versao=None, Sucesso=None):
        self.Versao = _cast(None, Versao)
        self.Sucesso = Sucesso
    def factory(*args_, **kwargs_):
        if CabecalhoType.subclass:
            return CabecalhoType.subclass(*args_, **kwargs_)
        else:
            return CabecalhoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Sucesso(self): return self.Sucesso
    def set_Sucesso(self, Sucesso): self.Sucesso = Sucesso
    def validate_tpSucesso(self, value):
        # Validate type tpSucesso, a restriction on xs:boolean.
        pass
    def get_Versao(self): return self.Versao
    def set_Versao(self, Versao): self.Versao = Versao
    def export(self, outfile, level, namespace_='', name_='CabecalhoType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CabecalhoType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CabecalhoType'):
        if self.Versao is not None and 'Versao' not in already_processed:
            already_processed.append('Versao')
            outfile.write(' Versao=%s' % (quote_attrib(self.Versao), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CabecalhoType', fromsubclass_=False):
        if self.Sucesso is not None:
            showIndent(outfile, level)
            outfile.write('<%sSucesso>%s</%sSucesso>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Sucesso)), input_name='Sucesso'), namespace_))
    def hasContent_(self):
        if (
            self.Sucesso is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CabecalhoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Versao is not None and 'Versao' not in already_processed:
            already_processed.append('Versao')
            showIndent(outfile, level)
            outfile.write('Versao = %s,\n' % (self.Versao,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Sucesso is not None:
            showIndent(outfile, level)
            outfile.write('Sucesso=%s,\n' % self.Sucesso)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Versao', node)
        if value is not None and 'Versao' not in already_processed:
            already_processed.append('Versao')
            self.Versao = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Sucesso':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Sucesso')
            self.Sucesso = ival_
            self.validate_tpSucesso(self.Sucesso)    # validate type tpSucesso
# end class CabecalhoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def export(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CanonicalizationMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = "%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def export(self, outfile, level, namespace_='', name_='SignatureMethodType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureMethodType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = "%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureMethodType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None):
        self.Algorithm = _cast(None, Algorithm)
        pass
    def factory(*args_, **kwargs_):
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def export(self, outfile, level, namespace_='', name_='DigestMethodType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DigestMethodType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DigestMethodType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm = "%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.append('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DigestMethodType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.Modulus = Modulus
        self.Exponent = Exponent
    def factory(*args_, **kwargs_):
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on xs:base64Binary.
        pass
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def export(self, outfile, level, namespace_='', name_='RSAKeyValueType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RSAKeyValueType', fromsubclass_=False):
        if self.Modulus is not None:
            showIndent(outfile, level)
            outfile.write('<%sModulus>%s</%sModulus>\n' % (namespace_, self.gds_format_string(quote_xml(self.Modulus).encode(ExternalEncoding), input_name='Modulus'), namespace_))
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('<%sExponent>%s</%sExponent>\n' % (namespace_, self.gds_format_string(quote_xml(self.Exponent).encode(ExternalEncoding), input_name='Exponent'), namespace_))
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RSAKeyValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Modulus is not None:
            showIndent(outfile, level)
            outfile.write('Modulus=%s,\n' % quote_python(self.Modulus).encode(ExternalEncoding))
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=%s,\n' % quote_python(self.Exponent).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            Modulus_ = child_.text
            Modulus_ = self.gds_validate_string(Modulus_, node, 'Modulus')
            self.Modulus = Modulus_
            self.validate_CryptoBinary(self.Modulus)    # validate type CryptoBinary
        elif nodeName_ == 'Exponent':
            Exponent_ = child_.text
            Exponent_ = self.gds_validate_string(Exponent_, node, 'Exponent')
            self.Exponent = Exponent_
            self.validate_CryptoBinary(self.Exponent)    # validate type CryptoBinary
# end class RSAKeyValueType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RetornoEnvioRPS'
        rootClass = RetornoEnvioRPS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RetornoEnvioRPS'
        rootClass = RetornoEnvioRPS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="RetornoEnvioRPS",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RetornoEnvioRPS'
        rootClass = RetornoEnvioRPS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from RetornoEnvioRPS_v01 import *\n\n')
    sys.stdout.write('import RetornoEnvioRPS_v01 as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CabecalhoType",
    "CanonicalizationMethodType",
    "DigestMethodType",
    "KeyInfoType",
    "KeyValueType",
    "RSAKeyValueType",
    "ReferenceType",
    "RetornoEnvioRPS",
    "SignatureMethodType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "tpCPFCNPJ",
    "tpChaveNFe",
    "tpChaveNFeRPS",
    "tpChaveRPS",
    "tpEndereco",
    "tpEvento",
    "tpInformacoesLote",
    "tpNFe",
    "tpRPS"
    ]
